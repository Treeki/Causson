def formatPrice(int total_pence) -> str {
	let pounds = total_pence / 100
	let pence = total_pence - (pounds * 100)
	"£" + str:from(pounds) + "." + if pence <= 0 {
		"00"
	} elif pence < 10 {
		"0" + str:from(pence)
	} else {
		str:from(pence)
	}
}

component ComboBoxDemo {
	box = gui:Box(gui:Orientation:Vertical) {
		.border_width = 10
		.spacing = 10

		gui:Label {
			.text = "You have selected " + match self.cb.selected_index {
				Just(i) => "item " + str:from(i + 1)
				None => "nothing!"
			}
		}

		cb = gui:ComboBoxText {
			+"test1"
			+"test2"
			+"test3"
		}

		gui:Frame {
			.label = Maybe<str>:Just("Add Entry")
			.border_width = 10
			gui:Box(gui:Orientation:Horizontal) {
				.border_width = 10
				.spacing = 5
				add_field = gui:Entry
				add_button = gui:Button {
					.label = "Add"
					.sensitive = self.add_field.text.length() > 0
					.clicked -> self.cb.add_child(self.add_field.text)
				}
			}
		}
	}
	
	def root() -> gui:Widget { gui:Widget:from(self.box) }
}

component PizzaSizeChooser {
	combo = gui:ComboBoxText {
		+"Small - 4 slices (£4.00)"
		+"Medium - 6 slices (£6.00)"
		+"Large - 10 slices (£8.00)"
		+"Extra Large - 16 slices (£14.00)"
		.selected_index = Maybe<int>:Just(0)
		.border_width = 10
	}

	dynamic int price = match self.combo.selected_index {
		Just(i) => {
			if i == 0 {
				400
			} elif i == 1 {
				600
			} elif i == 2 {
				800
			} elif i == 3 {
				1400
			} else {
				0
			}
		}
		None => 0
	}
	dynamic int toppingSurcharge = self.price / 5

	def root() -> gui:Widget { gui:Widget:from(self.combo) }
}

component PizzaToppingsChooser {
	toppingPrice = int(0)
	dynamic int price = \
		if self.selectedToppingCount() > 4 {
			self.toppingPrice * (self.selectedToppingCount() - 4)
		} else {
			0
		}

	box = gui:Box(gui:Orientation:Vertical) {
		.border_width = 10
		.spacing = 5
		gui:Label { .markup = "<i>(Price includes up to 4 toppings, " + formatPrice(self.toppingPrice) + " each afterwards)</i>" }

		gui:Box(gui:Orientation:Horizontal) {
			gui:Box(gui:Orientation:Vertical) {
				cheese = gui:CheckButton {
					.label = "Cheese"
					.active = true
				}
				tomato = gui:CheckButton { .label = "Sun-dried tomatoes" }
				chicken = gui:CheckButton { .label = "Grilled chicken" }
				oregano = gui:CheckButton { .label = "Hand-chopped oregano" }
				pepperoni = gui:CheckButton { .label = "Pepperoni (sliced)" }
				sweetCheese = gui:CheckButton { .label = "Sweet cheese" }
				mallows = gui:CheckButton { .label = "Marshmallows" }
			}
			gui:Box(gui:Orientation:Vertical) {
				beef = gui:CheckButton { .label = "Grounded beef" }
				bacon = gui:CheckButton { .label = "Bacon pieces" }
				haggis = gui:CheckButton { .label = "Homemade haggis" }
				haggis2 = gui:CheckButton { .label = "Factory-made haggis" }
				chorizo = gui:CheckButton { .label = "Spicy chorizo" }
				beans = gui:CheckButton { .label = "Fairtrade coffee beans" }
				tuna = gui:CheckButton { .label = "Dolphin-friendly tuna" }
			}
		}
	}

	def selectedToppingCount() -> int {
		if self.cheese.active { 1 } else { 0 } + \
		if self.tomato.active { 1 } else { 0 } + \
		if self.chicken.active { 1 } else { 0 } + \
		if self.oregano.active { 1 } else { 0 } + \
		if self.pepperoni.active { 1 } else { 0 } + \
		if self.sweetCheese.active { 1 } else { 0 } + \
		if self.mallows.active { 1 } else { 0 } + \
		if self.beef.active { 1 } else { 0 } + \
		if self.bacon.active { 1 } else { 0 } + \
		if self.haggis.active { 1 } else { 0 } + \
		if self.haggis2.active { 1 } else { 0 } + \
		if self.chorizo.active { 1 } else { 0 } + \
		if self.beans.active { 1 } else { 0 } + \
		if self.tuna.active { 1 } else { 0 }
	}

	def root() -> gui:Widget { gui:Widget:from(self.box) }
}

component PizzaSauceChooser {
	box = gui:Box(gui:Orientation:Horizontal) {
		.border_width = 10
		.spacing = 20

		tomato = gui:RadioButton         { .label = "Tomato" }
		garlic = gui:RadioButton(tomato) { .label = "Garlic" }
		choc   = gui:RadioButton(tomato) { .label = "Chocolate (+80p)" }
	}

	dynamic int price = if self.choc.active { 80 } else { 0 }

	def root() -> gui:Widget { gui:Widget:from(self.box) }
}

component PizzaDemo {
	box = gui:Box(gui:Orientation:Horizontal) {
		.border_width = 10
		.spacing = 10
		gui:Box(gui:Orientation:Vertical) {
			.spacing = 10

			-- Welcome Message
			gui:Label { .markup = "<b><big>Welcome to Goodpizza</big></b>" }
			gui:Label { .markup = "<i>Home of the Big Toste!️</i>" }

			gui:Frame {
				.label = Maybe<str>:Just("Step 1: Pick a size")
				size = PizzaSizeChooser
			}

			gui:Frame {
				.label = Maybe<str>:Just("Step 2: Pick a sauce")
				sauce = PizzaSauceChooser
			}

			gui:Frame {
				.label = Maybe<str>:Just("Step 3: Pick toppings")
				toppings = PizzaToppingsChooser {
					.toppingPrice = self.size.toppingSurcharge
				}
			}

			gui:Label {
				.markup = "Your total is " + formatPrice(self.total())
			}

			gui:Button {
				.label = "Generate Order"
			}
		}

		gui:Image("sample/pizza.gif")
	}

	def total() -> int {
		self.size.price + self.sauce.price + self.toppings.price
	}

	def root() -> gui:Widget { gui:Widget:from(self.box) }
}

component TestComp {
	box = gui:Box(gui:Orientation:Vertical) {
		.border_width = 10
		.spacing = 10

		gui:Label { .text = "This tab intentionally left blank." }
	}
	
	def root() -> gui:Widget { gui:Widget:from(self.box) }
}

component Window {
	wnd = gui:Window {
		.title = "Widget Gallery Demo"

		gui:Notebook {
			+"Welcome"
			gui:Box(gui:Orientation:Vertical) {
				.border_width = 20
				.spacing = 100
				gui:Label { .text = "Welcome to the Causson widget gallery!" }
				gui:Button {
					.label = "Quit"
					.clicked -> gui:quit()
				}
			}

			+"Combo Boxes"
			ComboBoxDemo

			+"Tab 3"
			TestComp

			+"Pizza"
			PizzaDemo
		}
		.destroy -> gui:quit()
	}
}

def main() -> void {
	gui:init()
	let w = Window:new()
	w.wnd.show()
	gui:run()
}


