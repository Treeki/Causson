component ComboBoxDemo {
	box = gui:Box(gui:Orientation:Vertical) {
		.border_width = 10
		.spacing = 10

		gui:Label {
			.text = "You have selected " + match self.cb.selected_index {
				Just(i) => "item " + str:from(i + 1)
				None => "nothing!"
			}
		}

		cb = gui:ComboBoxText {
			+"test1"
			+"test2"
			+"test3"
		}

		gui:Frame {
			.label = Maybe<str>:Just("Add Entry")
			.border_width = 10
			gui:Box(gui:Orientation:Horizontal) {
				.border_width = 10
				.spacing = 5
				add_field = gui:Entry
				add_button = gui:Button {
					.label = "Add"
					.sensitive = self.add_field.text.length() > 0
					.clicked -> self.cb.add_child(self.add_field.text)
				}
			}
		}
	}
	
	def root() -> gui:Widget { gui:Widget:from(self.box) }
}


component TestComp {
	box = gui:Box(gui:Orientation:Vertical) {
		.border_width = 10
		.spacing = 10

		gui:Label { .text = "This tab intentionally left blank." }
	}
	
	def root() -> gui:Widget { gui:Widget:from(self.box) }
}

component Window {
	wnd = gui:Window {
		.title = "Widget Gallery Demo"

		gui:Notebook {
			+"Welcome"
			gui:Box(gui:Orientation:Vertical) {
				.border_width = 20
				.spacing = 100
				gui:Label { .text = "Welcome to the Causson widget gallery!" }
				gui:Button {
					.label = "Quit"
					.clicked -> gui:quit()
				}
			}

			+"Combo Boxes"
			ComboBoxDemo

			+"Tab 3"
			TestComp
		}
		.destroy -> gui:quit()
	}
}

def main() -> void {
	gui:init()
	let w = Window:new()
	w.wnd.show()
	gui:run()
}


