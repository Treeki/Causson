WHITESPACE = _{" " | "\t" | ("\\" ~ NEWLINE)}
COMMENT = _{"--" ~ (!NEWLINE ~ ANY)*}

id = @{identifierStart ~ identifierChar*}
  identifierStart = _{XID_START | "_"}
  identifierChar = _{XID_START | XID_CONTINUE | "_" | "#" | idAllowedOpChars}
  idAllowedOpChars = _{"+" | "-" | "*" | "/" | "<" | ">" | "=" | "!"}

qualifiedID = {(id ~ ":")* ~ id}

fieldID = @{"@" ~ id}

typedID = {qualifiedID ~ id}

// Expressions
expr = {term ~ (operator ~ term)*}
  term = {termPiece ~ termSuffix*}
    termPiece = _{ifTerm | letTerm | bTrue | bFalse | qualifiedID | real | int | string | ("(" ~ expr ~ ")")}
      int = @{("+" | "-")? ~ ASCII_DIGIT+}
      real = @{int ~ "." ~ ASCII_DIGIT*}
      string = ${"\"" ~ stringInner ~ "\""}
        stringInner = @{stringChar*}
        stringChar = {!("\"") ~ ANY}
      bTrue = {"true"}
      bFalse = {"false"}
      ifTerm = {"if" ~ expr ~ "{" ~ codeBlock ~ "}" ~ ("elif" ~ expr ~ "{" ~ codeBlock ~ "}")* ~ ("else" ~ "{" ~ codeBlock ~ "}")?}
      letTerm = {"let" ~ id ~ "=" ~ expr}
    termSuffix = _{termCall | termPropAccess}
      termPropAccess = {"." ~ id}
      termCall = {("(" ~ ")") | ("(" ~ expr ~ ("," ~ expr)* ~ ")")}
  operator = _{add | subtract | multiply | divide | eq | ne | le | lt | ge | gt | assign | logAnd | logOr}
    add = {"+"}
    subtract = {"-"}
    multiply = {"*"}
    divide = {"/"}
    eq = {"=="}
    ne = {"!="}
    lt = {"<"}
    le = {"<="}
    gt = {">"}
    ge = {">="}
    assign = {"="}
    logAnd = {"&&"}
    logOr = {"||"}

codeBlock = {NEWLINE* ~ (expr ~ NEWLINE+)* ~ expr?}

// Global Definitions
gTypeDef = {"type" ~ qualifiedID ~ "=" ~ typeDef}
  typeDef = _{enumDef | wrapDef | recordDef}
    enumDef = {"enum" ~ "(" ~ (enumValue ~ ",")* ~ enumValue ~ ","? ~ ")"}
      enumValue = {id ~ ("(" ~ (typedID ~ ",")* ~ (typedID ~ ","?)? ~ ")")?}
    wrapDef = {"wrap" ~ qualifiedID}
    recordDef = {"record" ~ "{" ~ NEWLINE* ~ (typedID ~ (NEWLINE | ",")+)* ~ (typedID ~ (NEWLINE | ",")?)? ~ "}"}

gFuncDef = {"def" ~ funcSpec ~ "->" ~ qualifiedID ~ "{" ~ codeBlock ~ "}"}
  funcSpec = {qualifiedID ~ (("(" ~ funcSelfArg? ~ ")") | ("(" ~ (funcSelfArg ~ ",")? ~ (typedID ~ ",")* ~ typedID ~ ")"))}
    funcSelfArg = {"self"}

gComponentDef = {"component" ~ qualifiedID ~ "{" ~ NEWLINE* ~ (compSubDef ~ NEWLINE+)* ~ compSubDef? ~ "}"}
  compSubDef = _{compMethod | compPropSet | compEventConnection | compInstance}
    compPropSet = {"." ~ id ~ "=" ~ expr}
    compEventConnection = {"." ~ id ~ "->" ~ (expr | ("{" ~ codeBlock ~ "}"))}
    compInstance = {(id ~ "=")? ~ qualifiedID ~ compInstanceArgs? ~ ("{" ~ NEWLINE* ~ (compSubDef ~ NEWLINE+)* ~ compSubDef? ~ "}")?}
      compInstanceArgs = {"(" ~ (expr ~ ",")* ~ expr? ~ ")"}
    compMethod = {"def" ~ compMethodSpec ~ "->" ~ qualifiedID ~ "{" ~ codeBlock ~ "}"}
      compMethodSpec = {id ~ (("(" ~ ")") | ("(" ~ (typedID ~ ",")* ~ typedID ~ ")"))}

globalDef = {gTypeDef | gFuncDef | gComponentDef}

//program = _{ SOI ~ NEWLINE* ~ (globalDef ~ NEWLINE+)* ~ EOI }
program = _{ SOI ~ NEWLINE* ~ (globalDef ~ NEWLINE+)* ~ globalDef? ~ EOI }
